package workflows

import (
	"errors"
	"fmt"
	"os"
	"path/filepath"
	"strings"
)

// InitOptions configures project initialization scaffolding.
type InitOptions struct {
	Name     string
	Template string
	Force    bool
}

// InitializeProject scaffolds a new project directory with standard configuration files.
func InitializeProject(opts InitOptions) error {
	if opts.Name == "" {
		return fmt.Errorf("project name is required")
	}

	if opts.Template == "" {
		opts.Template = "web"
	}
	if opts.Template != "web" {
		return fmt.Errorf("unknown template %q", opts.Template)
	}

	targetDir := opts.Name
	if !filepath.IsAbs(targetDir) {
		targetDir = filepath.Join(".", targetDir)
	}

	if err := ensureDir(targetDir, opts.Force); err != nil {
		return err
	}

	files := webTemplateFiles(opts.Name)
	for relPath, contents := range files {
		fullPath := filepath.Join(targetDir, relPath)
		if err := writeFile(fullPath, contents, opts.Force); err != nil {
			return err
		}
	}

	return nil
}

func ensureDir(path string, force bool) error {
	if info, err := os.Stat(path); err == nil {
		if !info.IsDir() {
			return fmt.Errorf("%s exists and is not a directory", path)
		}
		if !force {
			return fmt.Errorf("directory %s already exists (use --force to overwrite)", path)
		}
	} else if !errors.Is(err, os.ErrNotExist) {
		return fmt.Errorf("failed to inspect %s: %w", path, err)
	}

	return os.MkdirAll(path, 0o755)
}

func writeFile(path, contents string, force bool) error {
	if _, err := os.Stat(path); err == nil && !force {
		return fmt.Errorf("file %s already exists (use --force to overwrite)", path)
	} else if err != nil && !errors.Is(err, os.ErrNotExist) {
		return fmt.Errorf("failed to inspect %s: %w", path, err)
	}

	if err := os.MkdirAll(filepath.Dir(path), 0o755); err != nil {
		return fmt.Errorf("failed to create directory for %s: %w", path, err)
	}

	if err := os.WriteFile(path, []byte(strings.TrimPrefix(contents, "\n")), 0o644); err != nil {
		return fmt.Errorf("failed to write %s: %w", path, err)
	}
	return nil
}

func webTemplateFiles(projectName string) map[string]string {
	image := fmt.Sprintf("registry.fly.io/%s:latest", projectName)

	return map[string]string{
		"fly.toml": fmt.Sprintf(`app = "%s"

[build]
  image = "%s"

[env]
  ENVIRONMENT = "production"

[[services]]
  internal_port = 1337
  protocol = "tcp"

  [[services.ports]]
    port = 80

  [[services.ports]]
    port = 443

  [[services.http_checks]]
    interval = "15s"
    timeout = "2s"
    method = "get"
    path = "/status"
`, projectName, image),
		".ko.yaml": `defaultPlatforms:
  - linux/amd64
  - linux/arm64
build:
  bare: true
  trimpath: true
`,
		"README.md": fmt.Sprintf("# %s\n\nGenerated by infra workflows init.\n\n## Next Steps\n\n1. Customize `fly.toml` with your secrets and regions.\n2. Update `.ko.yaml` to match your container build preferences.\n3. Run `go run . tools deploy` to push to Fly.io once you're ready.\n", projectName),
		".gitignore": `# Build artifacts
build/
*.log
.env
`,
	}
}
