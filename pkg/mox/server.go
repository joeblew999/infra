package mox

import (
	"context"
	"fmt"
	"os"
	"path/filepath"

	"github.com/joeblew999/infra/pkg/config"
	"github.com/joeblew999/infra/pkg/dep"
	"github.com/joeblew999/infra/pkg/goreman"
	"github.com/joeblew999/infra/pkg/log"
)

// Server represents a mox mail server instance
type Server struct {
	configPath string
	dataPath   string
	domain     string
	adminEmail string
}

// NewServer creates a new mox server instance
func NewServer(domain, adminEmail string) *Server {
	return &Server{
		domain:     domain,
		adminEmail: adminEmail,
		dataPath:   config.GetMoxDataPath(),
		configPath: config.GetMoxConfigPath(),
	}
}

// SetDataPath sets a custom data path for the server
func (s *Server) SetDataPath(path string) {
	s.dataPath = path
}

// SetConfigPath sets a custom config path for the server
func (s *Server) SetConfigPath(path string) {
	s.configPath = path
}

// Init initializes the mox server configuration and creates necessary directories
func (s *Server) Init() error {
	log.Info("Initializing mox mail server", "domain", s.domain, "admin", s.adminEmail)
	
	// Ensure mox binary is available
	if err := dep.InstallBinary("mox", false); err != nil {
		return fmt.Errorf("failed to install mox binary: %w", err)
	}
	
	// Create complete directory structure
	if err := s.createDirectoryStructure(); err != nil {
		return fmt.Errorf("failed to create directory structure: %w", err)
	}
	
	log.Info("Mox server initialized", "data", s.dataPath, "config", s.configPath)
	return nil
}

// createDirectoryStructure creates all necessary directories for mox operation
func (s *Server) createDirectoryStructure() error {
	// Main data directory
	if err := os.MkdirAll(s.dataPath, 0755); err != nil {
		return fmt.Errorf("failed to create mox data directory: %w", err)
	}
	
	// Config directory (same as data directory in our setup)
	configDir := filepath.Dir(s.configPath)
	if err := os.MkdirAll(configDir, 0755); err != nil {
		return fmt.Errorf("failed to create mox config directory: %w", err)
	}
	
	// Mox subdirectories that are commonly needed
	subdirs := []string{
		"accounts",    // Account data
		"queue",       // Mail queue
		"tmp",         // Temporary files
		"acme",        // ACME/TLS certificates
		"webmail",     // Webmail static files
	}
	
	for _, subdir := range subdirs {
		dirPath := filepath.Join(s.dataPath, subdir)
		if err := os.MkdirAll(dirPath, 0755); err != nil {
			return fmt.Errorf("failed to create mox subdirectory %s: %w", subdir, err)
		}
	}
	
	log.Info("Mox directory structure created", "data", s.dataPath, "subdirs", len(subdirs))
	return nil
}

// GenerateConfig generates a basic mox configuration
func (s *Server) GenerateConfig() error {
	// Basic mox configuration template
	configContent := fmt.Sprintf(`# Mox mail server configuration
# Generated by infra pkg/mox

DataDir: %s

Hostname: %s

Listeners:
  smtp:
    IPs: [0.0.0.0]
    Port: 10025
  imap:
    IPs: [0.0.0.0]
    Port: 10143
  smtps:
    IPs: [0.0.0.0]
    Port: 10465
  submission:
    IPs: [0.0.0.0]
    Port: 10587
  imaps:
    IPs: [0.0.0.0]
    Port: 10993
  https:
    IPs: [0.0.0.0]
    Port: 10443

PostmasterMailbox: Postmaster

HostTLSRSA:
  CertFile: 
  KeyFile: 

Accounts:
  admin:
    Domain: %s
    Destinations:
      %s: admin
    RejectsMailbox: admin-rejects
    JunkFilter:
      Threshold: 0.95
    MaxOutgoingMessagesPerDay: 1000
    MaxFirstTimeRecipientsPerDay: 200
    Mailboxes:
      Archive:
        AutoExpunge: 
      Drafts:
        AutoExpunge: 
      Junk:
        AutoExpunge: 90d
      Sent:
        AutoExpunge: 
      Trash:
        AutoExpunge: 90d

Routes:
- FromDomain: %s
  ListAllowDomain: %s
  ToMailbox: admin

WebHandlers:
- Domain: %s
  PathRegexp: ^/
  WebStatic:
    StripPrefix: /
    Root: webmail
    ListFiles: false
`, s.dataPath, s.domain, s.domain, s.adminEmail, s.domain, s.domain, s.domain)

	if err := os.WriteFile(s.configPath, []byte(configContent), 0644); err != nil {
		return fmt.Errorf("failed to write mox config: %w", err)
	}
	
	log.Info("Mox configuration generated", "path", s.configPath)
	return nil
}

// Start starts the mox server
func (s *Server) Start(ctx context.Context) error {
	log.Info("Starting mox mail server", "domain", s.domain, "config", s.configPath)
	
	// Initialize if not already done
	if err := s.Init(); err != nil {
		return err
	}
	
	// Generate config if it doesn't exist
	if _, err := os.Stat(s.configPath); os.IsNotExist(err) {
		if err := s.GenerateConfig(); err != nil {
			return err
		}
	}
	
	// TODO: Actually start mox server process
	// This would typically use exec.Command to start the mox binary
	log.Info("Mox server would start here", "config", s.configPath)
	
	return nil
}

// Stop stops the mox server
func (s *Server) Stop() error {
	log.Info("Stopping mox mail server")
	// TODO: Implement graceful shutdown
	return nil
}

// StartSupervised starts mox under goreman supervision (idempotent)
func StartSupervised(domain, adminEmail string) error {
	if domain == "" {
		domain = "localhost"
	}
	if adminEmail == "" {
		adminEmail = "admin@" + domain
	}
	
	// Ensure mox binary is available
	if err := dep.InstallBinary("mox", false); err != nil {
		return fmt.Errorf("failed to install mox binary: %w", err)
	}
	
	// Create server instance for initialization
	server := NewServer(domain, adminEmail)
	if err := server.Init(); err != nil {
		return err
	}
	
	// Generate config if needed
	if _, err := os.Stat(server.configPath); os.IsNotExist(err) {
		if err := server.GenerateConfig(); err != nil {
			return err
		}
	}
	
	// Register and start with goreman supervision
	return goreman.RegisterAndStart("mox", &goreman.ProcessConfig{
		Command:    config.GetMoxBinPath(),
		Args:       []string{"-config", server.configPath, "serve"},
		WorkingDir: ".",
		Env:        os.Environ(),
	})
}

// GetDataPath returns the mox data directory
func GetDataPath() string {
	return config.GetMoxDataPath()
}

// GetConfigPath returns the mox configuration file path
func GetConfigPath() string {
	return config.GetMoxConfigPath()
}

// SetupWorkingDirectory creates a complete mox working directory structure
// This includes all directories that mox might need during operation
func SetupWorkingDirectory(dataPath string) error {
	// Core mox directories
	dirs := []string{
		dataPath,                                    // Main data directory
		filepath.Join(dataPath, "accounts"),        // Account data
		filepath.Join(dataPath, "queue"),           // Mail queue
		filepath.Join(dataPath, "tmp"),             // Temporary files
		filepath.Join(dataPath, "acme"),            // ACME/TLS certificates
		filepath.Join(dataPath, "webmail"),         // Webmail static files
		filepath.Join(dataPath, "logs"),            // Log files
		filepath.Join(dataPath, "dkim"),            // DKIM keys
		filepath.Join(dataPath, "backup"),          // Backup storage
	}
	
	for _, dir := range dirs {
		if err := os.MkdirAll(dir, 0755); err != nil {
			return fmt.Errorf("failed to create directory %s: %w", dir, err)
		}
	}
	
	log.Info("Mox working directory setup complete", "path", dataPath, "dirs", len(dirs))
	return nil
}