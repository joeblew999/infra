// Code generated by goctl. DO NOT EDIT.
// goctl 1.9.0-alpha

package types

type DeckInfo struct {
	Id          string `json:"id"`
	Description string `json:"description"`
	Status      string `json:"status"`
	Format      string `json:"format"`
	CreatedAt   string `json:"created_at"`
}

type DownloadDeckRequest struct {
	Id     string `path:"id"`
	Format string `query:"format,optional,default=svg"` // svg, png, pdf, xml, dsh
}

type DownloadDeckResponse struct {
	Content     string `json:"content"`      // file content (base64 for binary)
	Filename    string `json:"filename"`     // suggested filename
	ContentType string `json:"content_type"` // mime type
}

type GenerateDeckRequest struct {
	Description string `json:"description"`                  // "pack of playing cards"
	Format      string `json:"format,optional,default=svg"`  // svg, png, pdf, xml, dsh
	Style       string `json:"style,optional,default=clean"` // clean, minimal, detailed
	Width       int    `json:"width,optional,default=10"`    // deck width
	Height      int    `json:"height,optional,default=6"`    // deck height
}

type GenerateDeckResponse struct {
	Id         string `json:"id"`                   // deck-123
	Status     string `json:"status"`               // processing, completed, failed
	Message    string `json:"message"`              // status message
	DshContent string `json:"dsh_content,optional"` // generated .dsh source
	OutputUrl  string `json:"output_url,optional"`  // download URL for final output
	CreatedAt  string `json:"created_at"`           // timestamp
}

type GetDeckStatusRequest struct {
	Id string `path:"id"`
}

type GetDeckStatusResponse struct {
	Id        string `json:"id"`
	Status    string `json:"status"` // processing, completed, failed
	Message   string `json:"message"`
	Progress  int    `json:"progress"` // 0-100
	CreatedAt string `json:"created_at"`
	UpdatedAt string `json:"updated_at"`
}

type HealthResponse struct {
	Status  string       `json:"status"`
	Version string       `json:"version"`
	Tools   []ToolStatus `json:"tools"`
}

type ListDecksResponse struct {
	Decks []DeckInfo `json:"decks"`
	Total int        `json:"total"`
}

type ToolStatus struct {
	Name      string `json:"name"` // decksh, svgdeck, etc.
	Available bool   `json:"available"`
	Version   string `json:"version,optional"`
}
