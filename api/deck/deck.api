syntax = "v1"

info (
	title:   "Deck API"
	desc:    "API for generating deck presentations from text descriptions"
	author:  "infra"
	version: "v1.0"
)

type GenerateDeckRequest {
	Description string `json:"description"` // "pack of playing cards"
	Format      string `json:"format,optional,default=svg"` // svg, png, pdf, xml, dsh
	Style       string `json:"style,optional,default=clean"` // clean, minimal, detailed
	Width       int    `json:"width,optional,default=10"` // deck width
	Height      int    `json:"height,optional,default=6"` // deck height
// This is a test comment
}

type GenerateDeckResponse {
	Id         string `json:"id"` // deck-123
	Status     string `json:"status"` // processing, completed, failed
	Message    string `json:"message"` // status message
	DshContent string `json:"dsh_content,optional"` // generated .dsh source
	OutputUrl  string `json:"output_url,optional"` // download URL for final output
	CreatedAt  string `json:"created_at"` // timestamp
}

type GetDeckStatusRequest {
	Id string `path:"id"`
}

type GetDeckStatusResponse {
	Id        string `json:"id"`
	Status    string `json:"status"` // processing, completed, failed
	Message   string `json:"message"`
	Progress  int    `json:"progress"` // 0-100
	CreatedAt string `json:"created_at"`
	UpdatedAt string `json:"updated_at"`
}

type DownloadDeckRequest {
	Id     string `path:"id"`
	Format string `query:"format,optional,default=svg"` // svg, png, pdf, xml, dsh
}

type DownloadDeckResponse {
	Content     string `json:"content"` // file content (base64 for binary)
	Filename    string `json:"filename"` // suggested filename
	ContentType string `json:"content_type"` // mime type
}

type ListDecksResponse {
	Decks []DeckInfo `json:"decks"`
	Total int        `json:"total"`
}

type DeckInfo {
	Id          string `json:"id"`
	Description string `json:"description"`
	Status      string `json:"status"`
	Format      string `json:"format"`
	CreatedAt   string `json:"created_at"`
}

type HealthResponse {
	Status  string       `json:"status"`
	Version string       `json:"version"`
	Tools   []ToolStatus `json:"tools"`
}

type ToolStatus {
	Name      string `json:"name"` // decksh, svgdeck, etc.
	Available bool   `json:"available"`
	Version   string `json:"version,optional"`
}

service deck-api {
	@handler GenerateDeckHandler
	post /api/v1/deck/generate (GenerateDeckRequest) returns (GenerateDeckResponse)

	@handler GetDeckStatusHandler
	get /api/v1/deck/status/:id (GetDeckStatusRequest) returns (GetDeckStatusResponse)

	@handler DownloadDeckHandler
	get /api/v1/deck/download/:id (DownloadDeckRequest) returns (DownloadDeckResponse)

	@handler ListDecksHandler
	get /api/v1/deck/list returns (ListDecksResponse)

	@handler HealthHandler
	get /api/v1/deck/health returns (HealthResponse)
}

