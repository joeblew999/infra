version: '3'

# Gemini CLI - Independent Taskfile (Phase 3)
# Uses only STACK_* environment variables and Go-powered commands
# No base.yml dependency, no shell statements

vars:
  GEMINI__NAME: "gemini"
  GEMINI__BINARY_NAME_NATIVE: '{{.GEMINI__NAME}}{{if eq OS "windows"}}.exe{{end}}'
  GEMINI__VERSION: "v0.1.9"
  GEMINI__REPO: "https://github.com/google-gemini/gemini-cli.git"
  GEMINI__BINARY_NAME: "gemini"

  GEMINI___NSTALL_DIR: "{{.TASK_DIR}}/.dep"

  STACK_BIN_DIR: "{{.TASK_DIR}}"

  GEMINI__BIN: "{{.STACK_BIN_DIR}}/{{.GEMINI__BINARY_NAME}}{{.STACK_BIN_SUFFIX}}"
  GEMINI__SRC_DIR: "{{.STACK_SRC_DIR}}/{{.GEMINI__NAME}}"
  GEMINI__DATA_DIR: "{{.STACK_DATA_DIR}}/gemini"
  GEMINI__CONFIG_DIR: "{{.STACK_CONFIG_DIR}}/gemini"

tasks:
  # Default task to show help
  default:
    desc: "Show available tasks"
    cmds:
      - task --list-all
    silent: true

  vars:
    desc: "Show environment variables"
    cmds:
      - echo "GEMINI__NAME                     {{.GEMINI__NAME}}"
      - echo "GEMINI__BINARY_NAME_NATIVE       {{.GEMINI__BINARY_NAME_NATIVE}}"
      - echo "GEMINI__VERSION                  {{.GEMINI__VERSION}}"
      - echo "GEMINI__REPO                     {{.GEMINI__REPO}}"
      - echo "GEMINI__BINARY_NAME              {{.GEMINI__BINARY_NAME}}"
      - echo "STACK_BIN_DIR                    {{.STACK_BIN_DIR}}"
      - echo "GEMINI__BIN                      {{.GEMINI__BIN}}"
      - echo "GEMINI__SRC_DIR                  {{.GEMINI__SRC_DIR}}"
      - echo "GEMINI__DATA_DIR                 {{.GEMINI__DATA_DIR}}"
      - echo "GEMINI__CONFIG_DIR               {{.GEMINI__CONFIG_DIR}}"
    silent: true

  # === STANDARD CONTRACT TASKS ===


  
  info:
    desc: "Show tool information"
    cmds:
      - '"{{.STACK_PROJECT_ROOT}}/.bin/stack-base" tool info "{{.GEMINI__NAME}}" "{{.GEMINI__VERSION}}"'

  status:
    desc: "Check tool build status"
    cmds:
      - '"{{.STACK_PROJECT_ROOT}}/.bin/stack-base" tool status "{{.GEMINI__NAME}}" "{{.GEMINI__VERSION}}"'

  clean:
    desc: "Clean tool runtime data"
    cmds:
      - '"{{.STACK_PROJECT_ROOT}}/.bin/stack-base" tool clean "{{.GEMINI__NAME}}"'

  clean-binary:
    desc: "Clean tool binary"
    cmds:
      - '"{{.STACK_PROJECT_ROOT}}/.bin/stack-base" tool clean-binary "{{.GEMINI__NAME}}"'

  clean-data:
    desc: "Clean tool data directory"
    cmds:
      - '"{{.STACK_PROJECT_ROOT}}/.bin/stack-base" tool clean-data "{{.GEMINI__NAME}}"'

  # === SOURCE MANAGEMENT ===
  
  source-clone:
    desc: "Clone or check source repository"
    cmds:
      - mkdir -p "{{.STACK_SRC_DIR}}"
      - git clone "{{.GEMINI__REPO}}" "{{.GEMINI__SRC_DIR}}" || git -C "{{.GEMINI__SRC_DIR}}" pull

  source-check:
    desc: "Check source repository status"
    cmds:
      - '"{{.STACK_PROJECT_ROOT}}/.bin/stack-base" source check "{{.GEMINI__NAME}}"'

  source-update:
    desc: "Update source repository"
    cmds:
      - '"{{.STACK_PROJECT_ROOT}}/.bin/stack-base" source update "{{.GEMINI__NAME}}" "{{.GEMINI__VERSION}}"'

  # === BUILD TASKS ===
  
  install-bun:
    desc: "Install Bun (required for Gemini CLI)"
    cmds:
      - test -x "$(command -v bun)" || curl -fsSL https://bun.sh/install | bash

  build:
    desc: "Build Gemini CLI binary with Bun"
    deps: [source-clone, install-bun]
    cmds:
      - mkdir -p "{{.STACK_BIN_DIR}}"
      - 'cd "{{.GEMINI__SRC_DIR}}" && bun install'
      - 'cd "{{.GEMINI__SRC_DIR}}" && bun run build'
      - cp "{{.GEMINI__SRC_DIR}}/dist/{{.GEMINI__BINARY_NAME}}" "{{.GEMINI__BIN}}"
      - chmod +x "{{.GEMINI__BIN}}"

  build-all:
    desc: "Build all Gemini CLI targets"
    deps: [build]

  # === RUNTIME TASKS ===
  
  setup:
    desc: "Setup Gemini CLI configuration"
    cmds:
      - mkdir -p "{{.GEMINI__CONFIG_DIR}}"
      - mkdir -p "{{.GEMINI__DATA_DIR}}"



  # === AI TASKS ===
  
  

  generate:
    desc: "Generate content with prompt (use PROMPT env var)"
    deps: [build, setup]
    cmds:
      - test -n "$PROMPT" || (printf "PROMPT environment variable required\n" && exit 1)
      - '"{{.GEMINI__BIN}}" generate "$PROMPT"'

  

  # === TEST TASKS ===
  
  test:
    desc: "Run Gemini CLI tests"
    deps: [source-clone, install-bun]
    cmds:
      - 'cd "{{.GEMINI__SRC_DIR}}" && bun test'

  # === UTILITY TASKS ===
  
  show-config:
    desc: "Show current configuration paths"
    cmds:
      - '"{{.STACK_PROJECT_ROOT}}/.bin/stack-base" tool info "{{.GEMINI__NAME}}" "{{.GEMINI__VERSION}}"'

### RUN ( calls start gemini for now)

  run:start:
    desc: "Start Gemini CLI (alias for chat)"
    cmds:
      # --extensions ( a list of extensions to load )
      # --ide-mode ( enable IDE mode )
      - '{{.GEMINI__BINARY_NAME_NATIVE}} --ide-mode --extensions=github,web,file'

  run:version:
    desc: "Check Gemini CLI version"
    cmds:
      - '"{{.GEMINI__BINARY_NAME_NATIVE}}" --version'

  # === EXTENSIONS TASKS ===

  run:extensions:list:
    desc: "List available extensions"
    cmds:
      - '{{.GEMINI__BINARY_NAME_NATIVE}} --list-extensions'
      

  run:help:
    desc: "Show Gemini CLI help"
    cmds:
      - '{{.GEMINI__BINARY_NAME_NATIVE}} --help'

  run:chat:
    desc: "Start interactive chat with Gemini"
    cmds:
      - '"{{.GEMINI__BINARY_NAME_NATIVE}}" chat'


  # === CONFIG TASKS ===
  
  run:config:api-key:
    desc: "Configure Gemini API key (use GEMINI__API_KEY env var)"
    cmds:
      - test -n "$GEMINI__API_KEY" || (printf "GEMINI__API_KEY environment variable required\n" && exit 1)
      - '"{{.GEMINI__BINARY_NAME_NATIVE}}" config set api-key "$GEMINI__API_KEY"'

  run:config:show:
    desc: "Show current configuration"
    cmds:
      - '{{.GEMINI__BINARY_NAME_NATIVE}} config show'
