# https://taskfile.dev
# Generic OpenTofu Taskfile.
version: '3'

vars:
  TOFU__BINARY_NAME: "tofu"
  TOFU__BINARY_NAME_NATIVE: '{{.TOFU__BINARY_NAME}}{{if eq OS "windows"}}.exe{{end}}'
  TOFU__INSTALL_DIR: "{{.TASK_DIR}}/.dep"
  TOFU__TF_DIR: '{{.TOFU__TF_DIR | default "./terraform"}}'

tasks:
  default:
    desc: List all available tasks.
    cmds:
      - task --list-all
    silent: true

  vars:
    desc: Show taskfile variables
    cmds:
      - cmd: |
          echo "TOFU__BINARY_NAME         {{.TOFU__BINARY_NAME}}"
          echo "TOFU__BINARY_NAME_NATIVE  {{.TOFU__BINARY_NAME_NATIVE}}"
          echo "TOFU__INSTALL_DIR         {{.TOFU__INSTALL_DIR}}"
          echo "TOFU__TF_DIR              {{.TOFU__TF_DIR}}"
    silent: true

  dep:
    desc: Install OpenTofu CLI
    cmds:
      - cmd: |
          # macOS via Homebrew (recommended)
          if ! command -v tofu >/dev/null 2>&1; then
            brew install opentofu/tap/opentofu
          else
            echo "OpenTofu is already installed."
          fi
        platforms: [darwin]
      - cmd: |
          # Unix systems via installer script
          if ! command -v tofu >/dev/null 2>&1; then
            curl -fsSL https://get.opentofu.org/install-opentofu.sh | sudo bash
          else
            echo "OpenTofu is already installed."
          fi
        platforms: [linux]
      - cmd: |
          # Windows via Chocolatey
          if (!(Get-Command tofu -ErrorAction SilentlyContinue)) {
            if (Get-Command choco -ErrorAction SilentlyContinue) {
              choco install opentofu -y
            } else {
              Write-Host "Please install Chocolatey first or install OpenTofu manually"
              exit 1
            }
          } else {
            Write-Host "OpenTofu is already installed."
          }
        platforms: [windows]
        sh: powershell
      - cmd: "{{.TOFU__BINARY_NAME_NATIVE}} version"
        desc: "Verify OpenTofu installation"

  dep:del:
    desc: Uninstall OpenTofu CLI
    cmds:
      - cmd: |
          # macOS via Homebrew
          if command -v tofu >/dev/null 2>&1; then
            brew uninstall opentofu
            echo "OpenTofu has been uninstalled."
          else
            echo "OpenTofu is not installed."
          fi
        platforms: [darwin]
      - cmd: |
          # Unix systems - manual removal
          if command -v tofu >/dev/null 2>&1; then
            sudo rm -f $(which tofu)
            echo "OpenTofu has been uninstalled."
          else
            echo "OpenTofu is not installed."
          fi
        platforms: [linux]
      - cmd: |
          # Windows via Chocolatey
          if (Get-Command tofu -ErrorAction SilentlyContinue) {
            if (Get-Command choco -ErrorAction SilentlyContinue) {
              choco uninstall opentofu -y
              Write-Host "OpenTofu has been uninstalled."
            } else {
              Write-Host "Chocolatey not found. Please uninstall OpenTofu manually."
              exit 1
            }
          } else {
            Write-Host "OpenTofu is not installed."
          }
        platforms: [windows]
        sh: powershell

  init:
    desc: Initialize OpenTofu configuration
    dir: "{{.TOFU__TF_DIR}}"
    deps: [dep]
    cmds:
      - "{{.TOFU__BINARY_NAME_NATIVE}} init"

  validate:
    desc: Validate OpenTofu configuration
    dir: "{{.TOFU__TF_DIR}}"
    deps: [init]
    cmds:
      - "{{.TOFU__BINARY_NAME_NATIVE}} validate"

  plan:
    desc: Create and show an execution plan
    dir: "{{.TOFU__TF_DIR}}"
    deps: [validate]
    cmds:
      - "{{.TOFU__BINARY_NAME_NATIVE}} plan"

  apply:
    desc: Apply the configuration to create/update infrastructure
    dir: "{{.TOFU__TF_DIR}}"
    deps: [validate]
    cmds:
      - "{{.TOFU__BINARY_NAME_NATIVE}} apply"

  apply:auto:
    desc: Apply the configuration automatically (non-interactive)
    dir: "{{.TOFU__TF_DIR}}"
    deps: [validate]
    cmds:
      - "{{.TOFU__BINARY_NAME_NATIVE}} apply -auto-approve"

  destroy:
    desc: Destroy the managed infrastructure
    dir: "{{.TOFU__TF_DIR}}"
    cmds:
      - "{{.TOFU__BINARY_NAME_NATIVE}} destroy"

  destroy:auto:
    desc: Destroy the managed infrastructure automatically (non-interactive)
    dir: "{{.TOFU__TF_DIR}}"
    cmds:
      - "{{.TOFU__BINARY_NAME_NATIVE}} destroy -auto-approve"

  state:
    desc: Show current state
    dir: "{{.TOFU__TF_DIR}}"
    cmds:
      - "{{.TOFU__BINARY_NAME_NATIVE}} state list"
      - echo "---"
      - "{{.TOFU__BINARY_NAME_NATIVE}} show"

  output:
    desc: Show output values
    dir: "{{.TOFU__TF_DIR}}"
    cmds:
      - "{{.TOFU__BINARY_NAME_NATIVE}} output"

  clean:
    desc: Clean up temporary files and state locks
    dir: "{{.TOFU__TF_DIR}}"
    cmds:
      - rm -rf .terraform.lock.hcl .terraform/
      - echo "Cleaned up OpenTofu temporary files"

  dev:
    desc: Development workflow - validate and plan
    deps: [validate]
    cmds:
      - task: plan

  ci:
    desc: CI workflow - init, validate, plan
    cmds:
      - task: init
      - task: validate
      - task: plan
