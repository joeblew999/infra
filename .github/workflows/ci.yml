name: Simple CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
  FLY_APP_NAME: ${{ secrets.FLY_APP_NAME || 'infra-mgmt' }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  ci-cd:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # For api-check comparisons
    
    - uses: actions/setup-go@v5
      with:
        go-version: 'stable'
    
    # Run the same commands you'd run locally
    - name: Tests
      run: go test ./...
    
    # Deploy with Multi-Registry Ko builds
    - name: Deploy
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        if [ -z "$FLY_API_TOKEN" ] && [ -z "$GITHUB_TOKEN" ]; then
          echo "‚ùå Neither FLY_API_TOKEN nor GITHUB_TOKEN set - skipping deploy"
          exit 0
        fi
        echo "üöÄ Deploying with Multi-Registry Ko build system..."
        export GIT_HASH=$(git rev-parse HEAD)
        export ENVIRONMENT=production
        
        # Multi-registry build and push (Go-based)
        go run . multiregistry --ghcr --environment production
        
        # Deploy to Fly.io using GHCR image
        if [ -n "$FLY_API_TOKEN" ]; then
          go run . deploy --env production
        fi
    
    # Verify deployment shows correct git hash
    - name: Verify Deployment
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        if [ -z "$FLY_API_TOKEN" ]; then
          echo "‚ùå FLY_API_TOKEN not set - skipping verification"
          exit 0
        fi
        
        echo "üîç Verifying deployment shows correct git hash..."
        EXPECTED_HASH=$(git rev-parse HEAD)
        EXPECTED_SHORT=${EXPECTED_HASH:0:7}
        
        # Wait for deployment to be ready
        sleep 30
        
        # Get build info from deployed app
        RESPONSE=$(curl -s https://${FLY_APP_NAME}.fly.dev/api/build || echo '{}')
        DEPLOYED_HASH=$(echo "$RESPONSE" | jq -r '.git_hash // empty' 2>/dev/null || echo "$RESPONSE" | grep -o '"git_hash":"[^"]*"' | cut -d'"' -f4)
        
        echo "Expected: $EXPECTED_HASH"
        echo "Deployed: $DEPLOYED_HASH"
        
        if [ "$DEPLOYED_HASH" = "$EXPECTED_HASH" ]; then
          echo "‚úÖ Deployment verification successful - git hash matches!"
        elif [ "$DEPLOYED_HASH" = "dev" ]; then
          echo "‚ùå Deployment shows 'dev' hash - git injection failed!"
          exit 1
        else
          echo "‚ö†Ô∏è  Deployment shows different hash - may be from previous deployment"
          echo "This could happen if deployment was skipped due to no changes"
        fi