name: Deploy to Fly.io

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
  FLY_APP_NAME: ${{ secrets.FLY_APP_NAME || 'infra-mgmt' }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 'stable'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Run CI workflow (DRY - uses pkg/workflows)
      run: go run . ci

    - name: Test container build (DRY - uses pkg/workflows)
      run: |
        export KO_DOCKER_REPO=ko.local
        go run . build --push=false

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 'stable'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Deploy with idempotent workflow (DRY - uses pkg/workflows)
      env:
        FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        FLY_APP_NAME: ${{ env.FLY_APP_NAME }}
        ENVIRONMENT: production
      run: |
        if [ -z "$FLY_API_TOKEN" ]; then
          echo "‚ùå FLY_API_TOKEN is not set as a repository secret"
          echo "üí° Please set FLY_API_TOKEN in GitHub repository secrets"
          echo "   Go to: Settings ‚Üí Secrets and variables ‚Üí Actions ‚Üí New repository secret"
          exit 1
        fi
        echo "‚úÖ FLY_API_TOKEN is configured"
        go run . deploy --app ${{ env.FLY_APP_NAME }} --env production

    - name: Check deployment status (DRY - uses pkg/workflows)
      run: go run . status --app ${{ env.FLY_APP_NAME }} --verbose