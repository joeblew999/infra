
# https://taskfile.dev

# https://taskfile.dev/reference/cli

## Hetzer Cloud CLI Taskfile

# https://github.com/hetznercloud/cli

# This Taskfile manages the installation and configuration of the Hetzner Cloud CLI (hcloud).
# It provides tasks for installing, configuring, and managing Hetzner Cloud resources.
# It supports multiple platforms (macOS, Linux, Windows) and is designed to be idempotent.
# The tasks include installation, configuration, server management, network management, and more.



version: '3'

vars:
  HETZNER__BINARY_NAME: hcloud
  HETZNER__VERSION: v1.51.0
  HETZNER__BINARY_NAME_NATIVE: '{{.HETZNER__BINARY_NAME}}-{{OS}}-{{ARCH}}{{if eq OS "windows"}}.exe{{end}}'
  HETZNER__INSTALL_DIR: "{{.TASK_DIR}}/.dep"

tasks:
  default:
    desc: Show available tasks
    cmds:
      - task --list-all

  vars:
    desc: Show taskfile variables
    cmds:
      - cmd: |
          echo "HETZNER__BINARY_NAME         {{.HETZNER__BINARY_NAME}}"
          echo "HETZNER__VERSION             {{.HETZNER__VERSION}}"
          echo "HETZNER__BINARY_NAME_NATIVE  {{.HETZNER__BINARY_NAME_NATIVE}}"
          echo "HETZNER__INSTALL_DIR         {{.HETZNER__INSTALL_DIR}}"
    silent: true

### DEP
  

  dep:
    desc: Install hcloud CLI
    preconditions:
      - sh: '! command -v hcloud >/dev/null 2>&1'
        msg: 'hcloud is already installed'
    cmds:
      - cmd: |
          mkdir -p {{.HETZNER__INSTALL_DIR}}
          curl -LO https://github.com/hetznercloud/cli/releases/download/{{.HETZNER__VERSION}}/hcloud-darwin-amd64.tar.gz
          tar -xzf hcloud-darwin-amd64.tar.gz
          mv hcloud {{.HETZNER__INSTALL_DIR}}/hcloud-darwin-amd64
          rm hcloud-darwin-amd64.tar.gz
          chmod +x {{.HETZNER__INSTALL_DIR}}/hcloud-darwin-amd64
          ln -sf {{.HETZNER__INSTALL_DIR}}/hcloud-darwin-amd64 {{.HETZNER__INSTALL_DIR}}/hcloud
        platforms: [darwin]
      - cmd: |
          mkdir -p {{.HETZNER__INSTALL_DIR}}
          curl -LO https://github.com/hetznercloud/cli/releases/download/{{.HETZNER__VERSION}}/hcloud-linux-amd64.tar.gz
          tar -xzf hcloud-linux-amd64.tar.gz
          mv hcloud {{.HETZNER__INSTALL_DIR}}/hcloud-linux-amd64
          rm hcloud-linux-amd64.tar.gz
          chmod +x {{.HETZNER__INSTALL_DIR}}/hcloud-linux-amd64
          ln -sf {{.HETZNER__INSTALL_DIR}}/hcloud-linux-amd64 {{.HETZNER__INSTALL_DIR}}/hcloud
        platforms: [linux]
      - cmd: |
          $url = "https://github.com/hetznercloud/cli/releases/download/{{.HETZNER__VERSION}}/hcloud-windows-amd64.zip"
          $output = "$env:TEMP\hcloud-windows-amd64.zip"
          $extractPath = "$env:TEMP\hcloud"
          
          Invoke-WebRequest -Uri $url -OutFile $output
          Expand-Archive -Path $output -DestinationPath $extractPath -Force
          
          New-Item -ItemType Directory -Path "{{.HETZNER__INSTALL_DIR}}" -Force
          Copy-Item "$extractPath\hcloud.exe" "{{.HETZNER__INSTALL_DIR}}\{{.HETZNER__BINARY_NAME}}-windows-amd64.exe" -Force
          Copy-Item "$extractPath\hcloud.exe" "{{.HETZNER__INSTALL_DIR}}\{{.HETZNER__BINARY_NAME}}.exe" -Force
          Remove-Item $output -Force
          Remove-Item $extractPath -Recurse -Force
        platforms: [windows]

  dep:del:
    desc: Uninstall the Hetzner Cloud CLI
    prompt: "Are you sure you want to uninstall hcloud?"
    cmds:
      - cmd: |
          rm -f {{.HETZNER__INSTALL_DIR}}/{{.HETZNER__BINARY_NAME}}-darwin-amd64 {{.HETZNER__INSTALL_DIR}}/{{.HETZNER__BINARY_NAME}}-linux-amd64 {{.HETZNER__INSTALL_DIR}}/{{.HETZNER__BINARY_NAME}}
        platforms: [darwin, linux]
      - cmd: |
          Remove-Item "{{.HETZNER__INSTALL_DIR}}\{{.HETZNER__BINARY_NAME}}-windows-amd64.exe" -Force -ErrorAction SilentlyContinue
          Remove-Item "{{.HETZNER__INSTALL_DIR}}\{{.HETZNER__BINARY_NAME}}.exe" -Force -ErrorAction SilentlyContinue
        platforms: [windows]

  # Configuration tasks
  config:
    desc: Configure hcloud with API token
    cmds:
      - cmd: |
          if [ -z "$HCLOUD_TOKEN" ]; then
            printf "Please set HCLOUD_TOKEN environment variable or run - hcloud context create\n"
            {{.HETZNER__BINARY_NAME_NATIVE}} context create
          else
            printf "Using HCLOUD_TOKEN from environment\n"
            {{.HETZNER__BINARY_NAME_NATIVE}} context create --name default --token "$HCLOUD_TOKEN"
          fi
        platforms: [darwin, linux]
      - cmd: |
          if (-not $env:HCLOUD_TOKEN) {
            Write-Host "Please set HCLOUD_TOKEN environment variable or run - hcloud context create" -ForegroundColor Yellow
            {{.HETZNER__BINARY_NAME_NATIVE}} context create
          } else {
            Write-Host "Using HCLOUD_TOKEN from environment" -ForegroundColor Green
            {{.HETZNER__BINARY_NAME_NATIVE}} context create --name default --token $env:HCLOUD_TOKEN
          }
        platforms: [windows]

  config:list:
    desc: List hcloud contexts
    cmds:
      - "{{.HETZNER__BINARY_NAME_NATIVE}} context list"

  config:active:
    desc: Show active context
    cmds:
      - "{{.HETZNER__BINARY_NAME_NATIVE}} context active"

  # Server management tasks
  server:list:
    desc: List all servers
    cmds:
      - "{{.HETZNER__BINARY_NAME_NATIVE}} server list"

  server:create:
    desc: Create a new server (interactive)
    cmds:
      - cmd: |
          printf "Creating a new server...\n"
          printf "Available server types:\n"
          {{.HETZNER__BINARY_NAME_NATIVE}} server-type list
          printf "\n"
          printf "Available images:\n"
          {{.HETZNER__BINARY_NAME_NATIVE}} image list --type system | head -10
          printf "\n"
          read -p "Server name: " name
          read -p "Server type (e.g., cx11): " type
          read -p "Image (e.g., ubuntu-22.04): " image
          read -p "Location (e.g., fsn1): " location
          {{.HETZNER__BINARY_NAME_NATIVE}} server create --name "$name" --type "$type" --image "$image" --location "$location"
        platforms: [darwin, linux]
      - cmd: |
          Write-Host "Creating a new server..." -ForegroundColor Green
          Write-Host "Available server types:" -ForegroundColor Yellow
          {{.HETZNER__BINARY_NAME_NATIVE}} server-type list
          Write-Host ""
          Write-Host "Available images:" -ForegroundColor Yellow
          {{.HETZNER__BINARY_NAME_NATIVE}} image list --type system | Select-Object -First 10
          Write-Host ""
          $name = Read-Host "Server name"
          $type = Read-Host "Server type (e.g., cx11)"
          $image = Read-Host "Image (e.g., ubuntu-22.04)"
          $location = Read-Host "Location (e.g., fsn1)"
          {{.HETZNER__BINARY_NAME_NATIVE}} server create --name "$name" --type "$type" --image "$image" --location "$location"
        platforms: [windows]

  server:delete:
    desc: Delete a server by name. Usage - task server:delete -- <server-name>
    cmds:
      - "{{.HETZNER__BINARY_NAME_NATIVE}} server delete {{.CLI_ARGS}}"

  server:ssh:
    desc: SSH into a server. Usage - task server:ssh -- <server-name>
    cmds:
      - "{{.HETZNER__BINARY_NAME_NATIVE}} server ssh {{.CLI_ARGS}}"

  # Network tasks
  network:list:
    desc: List all networks
    cmds:
      - "{{.HETZNER__BINARY_NAME_NATIVE}} network list"

  # Volume tasks
  volume:list:
    desc: List all volumes
    cmds:
      - "{{.HETZNER__BINARY_NAME_NATIVE}} volume list"

  # Firewall tasks
  firewall:list:
    desc: List all firewalls
    cmds:
      - "{{.HETZNER__BINARY_NAME_NATIVE}} firewall list"

  # Load balancer tasks
  lb:list:
    desc: List all load balancers
    cmds:
      - "{{.HETZNER__BINARY_NAME_NATIVE}} load-balancer list"

  # Generic hcloud command runner
  run:
    desc: Runs a Hetzner Cloud CLI command. Example - task run -- server list
    cmds:
      - "{{.HETZNER__BINARY_NAME_NATIVE}} {{.CLI_ARGS}}"

  # Development environment setup
  dev:setup:
    desc: Setup development environment with basic server
    cmds:
      - cmd: |
          printf "Setting up development environment...\n"
          SERVER_NAME="dev-$(date +%s)"
          {{.HETZNER__BINARY_NAME_NATIVE}} server create \
            --name "$SERVER_NAME" \
            --type cx11 \
            --image ubuntu-22.04 \
            --location fsn1 \
            --ssh-key $({{.HETZNER__BINARY_NAME_NATIVE}} ssh-key list -o noheader | head -1 | awk '{print $1}') \
            --user-data-from-file cloud-init.yml 2>/dev/null || \
          {{.HETZNER__BINARY_NAME_NATIVE}} server create \
            --name "$SERVER_NAME" \
            --type cx11 \
            --image ubuntu-22.04 \
            --location fsn1
          printf "✅ Development server '%s' created\n" "$SERVER_NAME"
        platforms: [darwin, linux]
      - cmd: |
          Write-Host "Setting up development environment..." -ForegroundColor Green
          $timestamp = Get-Date -Format "yyyyMMddHHmmss"
          $SERVER_NAME = "dev-$timestamp"
          
          # Try with SSH key first, fallback without
          $sshKeys = {{.HETZNER__BINARY_NAME_NATIVE}} ssh-key list -o noheader
          if ($sshKeys) {
            $firstKey = ($sshKeys | Select-Object -First 1) -split '\s+' | Select-Object -First 1
            try {
              if (Test-Path "cloud-init.yml") {
                {{.HETZNER__BINARY_NAME_NATIVE}} server create --name "$SERVER_NAME" --type cx11 --image ubuntu-22.04 --location fsn1 --ssh-key $firstKey --user-data-from-file cloud-init.yml
              } else {
                {{.HETZNER__BINARY_NAME_NATIVE}} server create --name "$SERVER_NAME" --type cx11 --image ubuntu-22.04 --location fsn1 --ssh-key $firstKey
              }
            } catch {
              {{.HETZNER__BINARY_NAME_NATIVE}} server create --name "$SERVER_NAME" --type cx11 --image ubuntu-22.04 --location fsn1
            }
          } else {
            {{.HETZNER__BINARY_NAME_NATIVE}} server create --name "$SERVER_NAME" --type cx11 --image ubuntu-22.04 --location fsn1
          }
          Write-Host "✅ Development server '$SERVER_NAME' created" -ForegroundColor Green
        platforms: [windows]

  dev:teardown:
    desc: Teardown development servers
    prompt: This will delete all servers with 'dev-' prefix. Continue?
    cmds:
      - cmd: |
          printf "Deleting development servers...\n"
          {{.HETZNER__BINARY_NAME_NATIVE}} server list -o noheader | grep "^dev-" | awk '{print $1}' | while read server; do
            printf "Deleting %s...\n" "$server"
            {{.HETZNER__BINARY_NAME_NATIVE}} server delete "$server"
          done
          printf "✅ Development servers deleted\n"
        platforms: [darwin, linux]
      - cmd: |
          Write-Host "Deleting development servers..." -ForegroundColor Yellow
          $servers = {{.HETZNER__BINARY_NAME_NATIVE}} server list -o noheader | Where-Object { $_ -match "^dev-" }
          foreach ($server in $servers) {
            $serverName = ($server -split '\s+')[0]
            Write-Host "Deleting $serverName..." -ForegroundColor Red
            {{.HETZNER__BINARY_NAME_NATIVE}} server delete "$serverName"
          }
          Write-Host "✅ Development servers deleted" -ForegroundColor Green
        platforms: [windows]

  # Status and info tasks
  status:
    desc: Show overall Hetzner Cloud status
    cmds:
      - cmd: |
          printf "=== Hetzner Cloud Status ===\n"
          printf "\n"
          printf "📊 Servers\n"
          {{.HETZNER__BINARY_NAME_NATIVE}} server list
          printf "\n"
          printf "🌐 Networks\n"
          {{.HETZNER__BINARY_NAME_NATIVE}} network list
          printf "\n"
          printf "💾 Volumes\n"
          {{.HETZNER__BINARY_NAME_NATIVE}} volume list
          printf "\n"
          printf "🔥 Firewalls\n"
          {{.HETZNER__BINARY_NAME_NATIVE}} firewall list
          printf "\n"
          printf "⚖️  Load Balancers\n"
          {{.HETZNER__BINARY_NAME_NATIVE}} load-balancer list

  pricing:
    desc: Show pricing information
    cmds:
      - cmd: |
          printf "=== Server Types & Pricing ===\n"
          {{.HETZNER__BINARY_NAME_NATIVE}} server-type list
          printf "\n"
          printf "=== Volume Pricing ===\n"
          printf "Volumes         €0.0476/GB/month\n"
          printf "\n"
          printf "=== Traffic Pricing ===\n"
          printf "Outbound traffic         €1.00/TB (first 21TB free per server)\n"

  # Backup and snapshot tasks
  backup:create:
    desc: Create backup of server. Usage - task backup:create -- <server-name>
    cmds:
      - "{{.HETZNER__BINARY_NAME_NATIVE}} server create-image --description \"Backup-$(date +%Y%m%d-%H%M%S)\" {{.CLI_ARGS}}"

  backup:list:
    desc: List all backups/images
    cmds:
      - "{{.HETZNER__BINARY_NAME_NATIVE}} image list --type backup"