# https://taskfile.dev

# https://taskfile.dev/reference/cli

# Runs Incus on a macOS host using Macpine.

# Its as idempotent as possible, so you can run it multiple times without issues and at any stage and it will be smart 
# about only running what is needed.




version: '3'


vars:
  

tasks:
  default:
    desc: List Incus operations and state.
    cmds:
      - echo
      - echo "Runs Incus on a macOS host using Macpine."
      - echo
      - task --list-all
      - echo
    silent: true

### DEP

  dep:
    desc: install dependencies
    cmds:
      - task dep-cli
      - task dep-server

  dep-del:
    desc: remove dependencies
    cmds:
      - task dep-cli-del
      - task dep-server-del

# specifc deps

  dep-cli:
    desc: install cli dependencies
    cmds:
      - cmd: |
          # brew https://formulae.brew.sh/formula/incus
          if ! command -v incus >/dev/null 2>&1; then
            brew install incus
          else
            echo "incus is already installed."
          fi
        platforms: [darwin]
      - cmd: |
          # https://linuxcontainers.org/incus/docs/main/installing/#linux
          apk add incus-client
        platforms: [linux]
      - cmd: |
          # choco cli: https://community.chocolatey.org/packages/incus
          choco install incus
        platforms: [windows]

  dep-cli-del:
    desc: remove cli dependencies
    cmds:
      - cmd: |
          # brew https://formulae.brew.sh/formula/incus
          brew uninstall incus
        platforms: [darwin]
      - cmd: |
          # https://linuxcontainers.org/incus/docs/main/installing/#linux
          apk del incus-client
        platforms: [linux]
      - cmd: |
          # choco cli: https://community.chocolatey.org/packages/incus
          choco uninstall incus
        platforms: [windows]

  dep-server:
    desc: install server dependencies
    cmds:
      # SERVER on a mac: https://beringresearch.github.io/macpine/install/
      # https://github.com/beringresearch/macpine
      # https://github.com/beringresearch/macpine/blob/main/docs/docs/incus_macpine.md
      - |
        if ! command -v macpine >/dev/null 2>&1 || ! command -v qemu-system-aarch64 >/dev/null 2>&1 && ! command -v qemu-system-x86_64 >/dev/null 2>&1 && ! command -v qemu-system-arm >/dev/null 2>&1 && ! command -v qemu-system-ppc >/dev/null 2>&1 && ! command -v qemu-system-mips >/dev/null 2>&1; then
          brew install qemu macpine
        else
          echo "qemu and macpine are already installed."
        fi
  dep-server-del:
    desc: remove server dependencies
    cmds:
      - brew uninstall qemu macpine

### SERVER

  server-setup:
    desc: setup a VM server using macpine, ready for inus. It will download the image. 220 MD only.
    deps:
      - dep-server
    cmds:
      # https://github.com/beringresearch/macpine/blob/main/docs/docs/incus_macpine.md
      - alpine launch --name incus --ssh 223 --port 8443
      # I guess this install debian ?
      - alpine exec incus -- "hwclock -s; wget https://raw.githubusercontent.com/beringresearch/macpine/main/scripts/enable_incus.sh"
      - alpine exec incus -- "ash enable_incus.sh"
      # Before you can create an instance, you need to configure incus.
      # https://github.com/beringresearch/macpine/blob/main/docs/docs/incus_macpine.md#configure-incus
      - alpine exec incus "incus admin init --auto"
      # Set up your incus remote to communicate with the incus client on your host.
      # https://github.com/beringresearch/macpine/blob/main/docs/docs/incus_macpine.md#configure-incus-remote
      - alpine exec incus "incus config set core.https_address 0.0.0.0:8443"
      - alpine exec incus "incus config trust add mymac"
      # !! NOTE: Make a note of the token as it will be used to authenticate the incus client.

  server-setup-del:
    desc: remove the incus VM server and shut down qemu fully.
    cmds:
      #- incus stop debian
      #- incus delete debian
      - alpine stop incus
      - alpine delete incus

  server-save:
    desc: You can save the Macpine VM image with your incus configuration for later use
    cmds:
      # Save the current state of the Debian instance.
      # This will create a tar ball that can be imported using alpine import.
      - alpine publish incus

  ### CLI

  cli-setup:
    desc: Setup the incus client to connect to the server
    deps:
      - dep-cli
    cmds:
      - incus --version
      # Now that the remote server is configured, lets finish by configuring the incus client and adding our incus macpine instance as a remote
      # https://github.com/beringresearch/macpine/blob/main/docs/docs/incus_macpine.md#add-the-remote-to-your-incus-client
      # Enter the trust token for incus that you've noted from the steps before.
      - incus remote add incus https://127.0.0.1
     
  cli-list:
    desc: list the instances.
    deps:
      - dep-cli
    cmds:
      - incus remote list

### DEBIAN

  debian-setup:
    desc: setup a debian instance.
    cmds:
      # Create a Debian instance using the incus client.
      # https://github.com/beringresearch/macpine/blob/main/docs/docs/incus_macpine.md#launching-your-first-incus-container
      - incus launch images:debian/bullseye debian
  
  debian-connect:
    desc: connect to the debian instance.
    cmds:
      # Connect to the Debian instance using incus exec.
      # https://github.com/beringresearch/macpine/blob/main/docs/docs/incus_macpine.md#connecting-to-your-first-incus-container
      - incus exec debian -- bash

  

      
